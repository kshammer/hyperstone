syntax = "proto2";
package hyperstone.networkbasetypes;

option cc_generic_services = false;

enum NET_Messages {
	net_NOP = 0;
	net_Disconnect = 1;
	net_File = 2;
	net_SplitScreenUser = 3;
	net_Tick = 4;
	net_StringCmd = 5;
	net_SetConVar = 6;
	net_SignonState = 7;
	net_SpawnGroup_Load = 8;
	net_SpawnGroup_ManifestUpdate = 9;
	net_SpawnGroup_SetCreationTick = 11;
	net_SpawnGroup_Unload = 12;
	net_SpawnGroup_LoadCompleted = 13;
	net_ReliableMessageEndMarker = 14;
    net_PlayerAvatarData = 100;
}

enum SIGNONSTATE {
	SIGNONSTATE_NONE = 0;
	SIGNONSTATE_CHALLENGE = 1;
	SIGNONSTATE_CONNECTED = 2;
	SIGNONSTATE_NEW = 3;
	SIGNONSTATE_PRESPAWN = 4;
	SIGNONSTATE_SPAWN = 5;
	SIGNONSTATE_FULL = 6;
	SIGNONSTATE_CHANGELEVEL = 7;
}

enum SpawnGroupFlags_t {
	SPAWN_GROUP_LOAD_ENTITIES_FROM_SAVE = 1;
	SPAWN_GROUP_DONT_SPAWN_ENTITIES = 2;
	SPAWN_GROUP_SYNCHRONOUS_SPAWN = 4;
	SPAWN_GROUP_IS_INITIAL_SPAWN_GROUP = 8;
	SPAWN_GROUP_CREATE_CLIENT_ONLY_ENTITIES = 16;
	SPAWN_GROUP_SAVE_ENTITIES = 32;
	SPAWN_GROUP_BLOCK_UNTIL_LOADED = 64;
	SPAWN_GROUP_LOAD_STREAMING_DATA = 128;
	SPAWN_GROUP_CREATE_NEW_SCENE_WORLD = 256;
}

enum ENetworkDisconnectionReason {
	NETWORK_DISCONNECT_INVALID = 0;
	NETWORK_DISCONNECT_SHUTDOWN = 1;
	NETWORK_DISCONNECT_DISCONNECT_BY_USER = 2;
	NETWORK_DISCONNECT_DISCONNECT_BY_SERVER = 3;
	NETWORK_DISCONNECT_LOST = 4;
	NETWORK_DISCONNECT_OVERFLOW = 5;
	NETWORK_DISCONNECT_STEAM_BANNED = 6;
	NETWORK_DISCONNECT_STEAM_INUSE = 7;
	NETWORK_DISCONNECT_STEAM_TICKET = 8;
	NETWORK_DISCONNECT_STEAM_LOGON = 9;
	NETWORK_DISCONNECT_STEAM_AUTHCANCELLED = 10;
	NETWORK_DISCONNECT_STEAM_AUTHALREADYUSED = 11;
	NETWORK_DISCONNECT_STEAM_AUTHINVALID = 12;
	NETWORK_DISCONNECT_STEAM_VACBANSTATE = 13;
	NETWORK_DISCONNECT_STEAM_LOGGED_IN_ELSEWHERE = 14;
	NETWORK_DISCONNECT_STEAM_VAC_CHECK_TIMEDOUT = 15;
	NETWORK_DISCONNECT_STEAM_DROPPED = 16;
	NETWORK_DISCONNECT_STEAM_OWNERSHIP = 17;
	NETWORK_DISCONNECT_SERVERINFO_OVERFLOW = 18;
	NETWORK_DISCONNECT_TICKMSG_OVERFLOW = 19;
	NETWORK_DISCONNECT_STRINGTABLEMSG_OVERFLOW = 20;
	NETWORK_DISCONNECT_DELTAENTMSG_OVERFLOW = 21;
	NETWORK_DISCONNECT_TEMPENTMSG_OVERFLOW = 22;
	NETWORK_DISCONNECT_SOUNDSMSG_OVERFLOW = 23;
	NETWORK_DISCONNECT_SNAPSHOTOVERFLOW = 24;
	NETWORK_DISCONNECT_SNAPSHOTERROR = 25;
	NETWORK_DISCONNECT_RELIABLEOVERFLOW = 26;
	NETWORK_DISCONNECT_BADDELTATICK = 27;
	NETWORK_DISCONNECT_NOMORESPLITS = 28;
	NETWORK_DISCONNECT_TIMEDOUT = 29;
	NETWORK_DISCONNECT_DISCONNECTED = 30;
	NETWORK_DISCONNECT_LEAVINGSPLIT = 31;
	NETWORK_DISCONNECT_DIFFERENTCLASSTABLES = 32;
	NETWORK_DISCONNECT_BADRELAYPASSWORD = 33;
	NETWORK_DISCONNECT_BADSPECTATORPASSWORD = 34;
	NETWORK_DISCONNECT_HLTVRESTRICTED = 35;
	NETWORK_DISCONNECT_NOSPECTATORS = 36;
	NETWORK_DISCONNECT_HLTVUNAVAILABLE = 37;
	NETWORK_DISCONNECT_HLTVSTOP = 38;
	NETWORK_DISCONNECT_KICKED = 39;
	NETWORK_DISCONNECT_BANADDED = 40;
	NETWORK_DISCONNECT_KICKBANADDED = 41;
	NETWORK_DISCONNECT_HLTVDIRECT = 42;
	NETWORK_DISCONNECT_PURESERVER_CLIENTEXTRA = 43;
	NETWORK_DISCONNECT_PURESERVER_MISMATCH = 44;
	NETWORK_DISCONNECT_USERCMD = 45;
	NETWORK_DISCONNECT_REJECTED_BY_GAME = 46;
	NETWORK_DISCONNECT_MESSAGE_PARSE_ERROR = 47;
	NETWORK_DISCONNECT_INVALID_MESSAGE_ERROR = 48;
	NETWORK_DISCONNECT_BAD_SERVER_PASSWORD = 49;
	NETWORK_DISCONNECT_DIRECT_CONNECT_RESERVATION = 50;
	NETWORK_DISCONNECT_CONNECTION_FAILURE = 51;
	NETWORK_DISCONNECT_NO_PEER_GROUP_HANDLERS = 52;
	NETWORK_DISCONNECT_RECONNECTION = 53;
}

message CMsgVector {
	optional float x = 1;
	optional float y = 2;
	optional float z = 3;
}

message CMsgVector2D {
	optional float x = 1;
	optional float y = 2;
}

message CMsgQAngle {
	optional float x = 1;
	optional float y = 2;
	optional float z = 3;
}

message CMsgRGBA {
	optional int32 r = 1;
	optional int32 g = 2;
	optional int32 b = 3;
	optional int32 a = 4;
}

message CEntityMsg {
    optional uint32 target_entity = 1;
}

message CMsgPlayerInfo {
	optional string name = 1;
	optional fixed64 xuid = 2;
	optional int32 userid = 3;
	optional fixed64 steamid = 4;
	optional bool fakeplayer = 5;
	optional bool ishltv = 6;
	repeated fixed32 customFiles = 7;
	optional int32 filesDownloaded = 8;
}

message CMsg_CVars {
	message CVar {
		optional string name = 1;
		optional string value = 2;
	}

	repeated CMsg_CVars.CVar cvars = 1;
}

message CNETMsg_NOP {
}

message CNETMsg_SplitScreenUser {
	optional int32 slot = 1;
}

message CNETMsg_Disconnect {
	optional ENetworkDisconnectionReason reason = 2 [default = NETWORK_DISCONNECT_INVALID];
}

message CNETMsg_File {
	optional int32 transfer_id = 1;
	optional string file_name = 2;
	optional bool is_replay_demo_file = 3;
	optional bool deny = 4;
	optional bool is_file_requested = 5;
}

message CNETMsg_Tick {
	optional uint32 tick = 1;
	optional uint32 host_frametime = 2;
	optional uint32 host_frametime_std_deviation = 3;
	optional uint32 host_computationtime = 4;
	optional uint32 host_computationtime_std_deviation = 5;
	optional uint32 host_framestarttime_std_deviation = 6;
	optional uint32 host_loss = 7;
	optional uint32 host_unfiltered_frametime = 8;
}

message CNETMsg_StringCmd {
	optional string command = 1;
}

message CNETMsg_SetConVar {
	optional CMsg_CVars convars = 1;
}

message CNETMsg_SignonState {
	optional uint32 signon_state = 1;
	optional uint32 spawn_count = 2;
	optional uint32 num_server_players = 3;
	repeated string players_networkids = 4;
	optional string map_name = 5;
	optional string addons = 6;
}

message CSVCMsg_GameEvent {
	message key_t {
		optional int32 type = 1;
		optional string val_string = 2;
		optional float val_float = 3;
		optional int32 val_long = 4;
		optional int32 val_short = 5;
		optional int32 val_byte = 6;
		optional bool val_bool = 7;
		optional uint64 val_uint64 = 8;
	}

	optional string event_name = 1;
	optional int32 eventid = 2;
	repeated CSVCMsg_GameEvent.key_t keys = 3;
}

message CSVCMsgList_GameEvents {
	message event_t {
		optional int32 tick = 1;
		optional CSVCMsg_GameEvent event = 2;
	}

	repeated CSVCMsgList_GameEvents.event_t events = 1;
}

message CSVCMsg_UserMessage {
	optional int32 msg_type = 1;
	optional bytes msg_data = 2;
}

message CSVCMsgList_UserMessages {
	message usermsg_t {
		optional int32 tick = 1;
		optional CSVCMsg_UserMessage msg = 2;
	}

	repeated CSVCMsgList_UserMessages.usermsg_t usermsgs = 1;
}

message CNETMsg_SpawnGroup_Load {
	optional string worldname = 1;
	optional string entitylumpname = 2;
	optional string entityfiltername = 3;
	optional uint32 spawngrouphandle = 4;
	optional uint32 spawngroupownerhandle = 5;
	optional CMsgVector world_offset_pos = 6;
	optional CMsgQAngle world_offset_angle = 7;
	optional bytes spawngroupmanifest = 8;
	optional uint32 flags = 9;
	optional int32 tickcount = 10;
	optional bool manifestincomplete = 11;
	optional string localnamefixup = 12;
	optional string parentnamefixup = 13;
	optional int32 manifestloadpriority = 14;
	optional uint32 worldgroupid = 15;
	optional uint32 creationsequence = 16;
	optional string savegamefilename = 17;
	optional uint32 spawngroupparenthandle = 18;
    optional bool leveltransition = 19;
}

message CNETMsg_SpawnGroup_ManifestUpdate {
	optional uint32 spawngrouphandle = 1;
	optional bytes spawngroupmanifest = 2;
	optional bool manifestincomplete = 3;
}

message CNETMsg_SpawnGroup_SetCreationTick {
	optional uint32 spawngrouphandle = 1;
	optional int32 tickcount = 2;
	optional uint32 creationsequence = 3;
}

message CNETMsg_SpawnGroup_Unload {
	optional uint32 spawngrouphandle = 1;
	optional uint32 flags = 2;
	optional int32 tickcount = 3;
}

message CNETMsg_SpawnGroup_LoadCompleted {
	optional uint32 spawngrouphandle = 1;
}

message CSVCMsg_GameSessionConfiguration {
	optional bool is_multiplayer = 1;
	optional bool is_loadsavegame = 2;
	optional bool is_background_map = 3;
	optional bool is_headless = 4;
	optional uint32 min_client_limit = 5;
	optional uint32 max_client_limit = 6;
	optional uint32 max_clients = 7;
	optional fixed32 tick_interval = 8;
	optional string hostname = 9;
	optional string savegamename = 10;
	optional string s1_mapname = 11;
	optional string gamemode = 12;
	optional string server_ip_address = 13;
	optional bytes data = 14;
	optional bool is_localonly = 15;
    optional bool no_steam_server = 19;
	optional bool is_transition = 16;
	optional string previouslevel = 17;
	optional string landmarkname = 18;
}

message CNETMsg_ReliableMessageEndMarker {
}

message CNETMsg_PlayerAvatarData {
	optional uint32 accountid = 1;
	optional bytes rgb = 2;
}