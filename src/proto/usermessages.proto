syntax = "proto2";
package hyperstone.usermessages;

import "networkbasetypes.proto";

option optimize_for = SPEED;
option cc_generic_services = false;

enum EBaseUserMessages {
	UM_AchievementEvent = 101;
	UM_CloseCaption = 102;
	UM_CloseCaptionDirect = 103;
	UM_CurrentTimescale = 104;
	UM_DesiredTimescale = 105;
	UM_Fade = 106;
	UM_GameTitle = 107;
	UM_HintText = 109;
	UM_HudMsg = 110;
	UM_HudText = 111;
	UM_KeyHintText = 112;
	UM_ColoredText = 113;
	UM_RequestState = 114;
	UM_ResetHUD = 115;
	UM_Rumble = 116;
	UM_SayText = 117;
	UM_SayText2 = 118;
	UM_SayTextChannel = 119;
	UM_Shake = 120;
	UM_ShakeDir = 121;
	UM_TextMsg = 124;
	UM_ScreenTilt = 125;
	UM_Train = 126;
	UM_VGUIMenu = 127;
	UM_VoiceMask = 128;
	UM_VoiceSubtitle = 129;
	UM_SendAudio = 130;
	UM_ItemPickup = 131;
	UM_AmmoDenied = 132;
	UM_CrosshairAngle = 133;
	UM_ShowMenu = 134;
	UM_CreditsMsg = 135;
	UM_CloseCaptionPlaceholder = 142;
	UM_CameraTransition = 143;
	UM_AudioParameter = 144;
	UM_ParticleManager = 145;
	UM_HudError = 146;
	UM_CustomGameEvent = 148;
    UM_AnimGraphUpdate = 149;
    UM_HapticsManagerPulse = 150;
    UM_HapticsManagerEffect = 151;
	UM_MAX_BASE = 200;
}

enum EBaseEntityMessages {
	EM_PlayJingle = 136;
	EM_ScreenOverlay = 137;
	EM_RemoveAllDecals = 138;
	EM_PropagateForce = 139;
	EM_DoSpark = 140;
	EM_FixAngle = 141;
}

enum EHapticPulseType {
	VR_HAND_HAPTIC_PULSE_LIGHT = 0;
	VR_HAND_HAPTIC_PULSE_MEDIUM = 1;
	VR_HAND_HAPTIC_PULSE_STRONG = 2;
}

message CUserMessageFade {
	optional uint32 duration = 1;
	optional uint32 hold_time = 2;
	optional uint32 flags = 3;
	optional fixed32 color = 4;
}

message CUserMessageSayText2 {
	optional uint32 entityindex = 1;
	optional bool chat = 2;
	optional string messagename = 3;
	optional string param1 = 4;
	optional string param2 = 5;
	optional string param3 = 6;
	optional string param4 = 7;
}

message CUserMessageTextMsg {
	optional uint32 dest = 1;
	repeated string param = 2;
}

message CUserMessageResetHUD {
}

message CUserMessageSendAudio {
	optional string soundname = 1;
	optional bool stop = 2;
}

message CUserMessageAudioParameter {
	optional uint32 parameter_type = 1;
	optional uint32 name_hash_code = 2;
	optional float value = 3;
	optional uint32 int_value = 4;
}

message CUserMessageVoiceMask {
	repeated uint32 gamerules_masks = 1;
	repeated uint32 ban_masks = 2;
	optional bool mod_enable = 3;
}

message CEntityMessagePlayJingle {
    optional networkbasetypes.CEntityMsg entity_msg = 1;
}

message CUserMessageHapticPulse {
	optional int32 hand_id = 1;
	optional EHapticPulseType pulse_type = 2 [default = VR_HAND_HAPTIC_PULSE_LIGHT];
}

message CEntityMessageScreenOverlay {
	optional bool start_effect = 1;
    optional networkbasetypes.CEntityMsg entity_msg = 2;
}

message CEntityMessageRemoveAllDecals {
	optional bool remove_decals = 1;
    optional networkbasetypes.CEntityMsg entity_msg = 2;
}

message CEntityMessagePropagateForce {
	optional networkbasetypes.CMsgVector impulse = 1;
    optional networkbasetypes.CEntityMsg entity_msg = 2;
}

message CEntityMessageDoSpark {
	optional networkbasetypes.CMsgVector origin = 1;
	optional uint32 entityindex = 2;
	optional float radius = 3;
	optional fixed32 color = 4;
	optional uint32 beams = 5;
	optional float thick = 6;
	optional float duration = 7;
    optional networkbasetypes.CEntityMsg entity_msg = 8;
}

message CEntityMessageFixAngle {
	optional bool relative = 1;
	optional networkbasetypes.CMsgQAngle angle = 2;
    optional networkbasetypes.CEntityMsg entity_msg = 3;
}

message CUserMsg_HudError {
	optional int32 order_id = 1;
}

message CUserMsg_CustomGameEvent_ClientToServer {
	optional string event_name = 1;
	optional bytes data = 2;
}

message CUserMsg_CustomGameEvent_ServerToClient {
	optional string event_name = 1;
	optional bytes data = 2;
}

message CUserMsg_TrackedControllerInput_ClientToServer {
	optional bytes data = 1;
}