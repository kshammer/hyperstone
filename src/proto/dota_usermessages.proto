syntax = "proto2";
package hyperstone.dota_usermessages;

import "networkbasetypes.proto";
import "dota_commonmessages.proto";

option optimize_for = SPEED;
option cc_generic_services = false;

enum DOTA_COMBATLOG_TYPES {
	DOTA_COMBATLOG_INVALID = -1;
	DOTA_COMBATLOG_DAMAGE = 0;
	DOTA_COMBATLOG_HEAL = 1;
	DOTA_COMBATLOG_MODIFIER_ADD = 2;
	DOTA_COMBATLOG_MODIFIER_REMOVE = 3;
	DOTA_COMBATLOG_DEATH = 4;
	DOTA_COMBATLOG_ABILITY = 5;
	DOTA_COMBATLOG_ITEM = 6;
	DOTA_COMBATLOG_LOCATION = 7;
	DOTA_COMBATLOG_GOLD = 8;
	DOTA_COMBATLOG_GAME_STATE = 9;
	DOTA_COMBATLOG_XP = 10;
	DOTA_COMBATLOG_PURCHASE = 11;
	DOTA_COMBATLOG_BUYBACK = 12;
	DOTA_COMBATLOG_ABILITY_TRIGGER = 13;
	DOTA_COMBATLOG_PLAYERSTATS = 14;
	DOTA_COMBATLOG_MULTIKILL = 15;
	DOTA_COMBATLOG_KILLSTREAK = 16;
	DOTA_COMBATLOG_TEAM_BUILDING_KILL = 17;
	DOTA_COMBATLOG_FIRST_BLOOD = 18;
	DOTA_COMBATLOG_MODIFIER_STACK_EVENT = 19;
	DOTA_COMBATLOG_NEUTRAL_CAMP_STACK = 20;
	DOTA_COMBATLOG_PICKUP_RUNE = 21;
	DOTA_COMBATLOG_REVEALED_INVISIBLE = 22;
	DOTA_COMBATLOG_HERO_SAVED = 23;
	DOTA_COMBATLOG_MANA_RESTORED = 24;
	DOTA_COMBATLOG_HERO_LEVELUP = 25;
	DOTA_COMBATLOG_BOTTLE_HEAL_ALLY = 26;
	DOTA_COMBATLOG_ENDGAME_STATS = 27;
	DOTA_COMBATLOG_INTERRUPT_CHANNEL = 28;
	DOTA_COMBATLOG_ALLIED_GOLD = 29;
	DOTA_COMBATLOG_AEGIS_TAKEN = 30;
	DOTA_COMBATLOG_MANA_DAMAGE = 31;
	DOTA_COMBATLOG_PHYSICAL_DAMAGE_PREVENTED = 32;
	DOTA_COMBATLOG_UNIT_SUMMONED = 33;
	DOTA_COMBATLOG_ATTACK_EVADE = 34;
	DOTA_COMBATLOG_TREE_CUT = 35;
	DOTA_COMBATLOG_SUCCESSFUL_SCAN = 36;
	DOTA_COMBATLOG_END_KILLSTREAK = 37;
	DOTA_COMBATLOG_BLOODSTONE_CHARGE = 38;
	DOTA_COMBATLOG_CRITICAL_DAMAGE = 39;
	DOTA_COMBATLOG_SPELL_ABSORB = 40;
	DOTA_COMBATLOG_UNIT_TELEPORTED = 41;
	DOTA_COMBATLOG_KILL_EATER_EVENT = 42;
}

enum DOTA_CHAT_MESSAGE {
    CHAT_MESSAGE_INVALID = -1;
    CHAT_MESSAGE_HERO_KILL = 0;
    CHAT_MESSAGE_HERO_DENY = 1;
    CHAT_MESSAGE_BARRACKS_KILL = 2;
    CHAT_MESSAGE_TOWER_KILL = 3;
    CHAT_MESSAGE_TOWER_DENY = 4;
    CHAT_MESSAGE_FIRSTBLOOD = 5;
    CHAT_MESSAGE_STREAK_KILL = 6;
    CHAT_MESSAGE_BUYBACK = 7;
    CHAT_MESSAGE_AEGIS = 8;
    CHAT_MESSAGE_ROSHAN_KILL = 9;
    CHAT_MESSAGE_COURIER_LOST = 10;
    CHAT_MESSAGE_COURIER_RESPAWNED = 11;
    CHAT_MESSAGE_GLYPH_USED = 12;
    CHAT_MESSAGE_ITEM_PURCHASE = 13;
    CHAT_MESSAGE_CONNECT = 14;
    CHAT_MESSAGE_DISCONNECT = 15;
    CHAT_MESSAGE_DISCONNECT_WAIT_FOR_RECONNECT = 16;
    CHAT_MESSAGE_DISCONNECT_TIME_REMAINING = 17;
    CHAT_MESSAGE_DISCONNECT_TIME_REMAINING_PLURAL = 18;
    CHAT_MESSAGE_RECONNECT = 19;
    CHAT_MESSAGE_PLAYER_LEFT = 20;
    CHAT_MESSAGE_SAFE_TO_LEAVE = 21;
    CHAT_MESSAGE_RUNE_PICKUP = 22;
    CHAT_MESSAGE_RUNE_BOTTLE = 23;
    CHAT_MESSAGE_INTHEBAG = 24;
    CHAT_MESSAGE_SECRETSHOP = 25;
    CHAT_MESSAGE_ITEM_AUTOPURCHASED = 26;
    CHAT_MESSAGE_ITEMS_COMBINED = 27;
    CHAT_MESSAGE_SUPER_CREEPS = 28;
    CHAT_MESSAGE_CANT_USE_ACTION_ITEM = 29;
    CHAT_MESSAGE_CHARGES_EXHAUSTED = 30;
    CHAT_MESSAGE_CANTPAUSE = 31;
    CHAT_MESSAGE_NOPAUSESLEFT = 32;
    CHAT_MESSAGE_CANTPAUSEYET = 33;
    CHAT_MESSAGE_PAUSED = 34;
    CHAT_MESSAGE_UNPAUSE_COUNTDOWN = 35;
    CHAT_MESSAGE_UNPAUSED = 36;
    CHAT_MESSAGE_AUTO_UNPAUSED = 37;
    CHAT_MESSAGE_YOUPAUSED = 38;
    CHAT_MESSAGE_CANTUNPAUSETEAM = 39;
    CHAT_MESSAGE_VOICE_TEXT_BANNED = 41;
    CHAT_MESSAGE_SPECTATORS_WATCHING_THIS_GAME = 42;
    CHAT_MESSAGE_REPORT_REMINDER = 43;
    CHAT_MESSAGE_ECON_ITEM = 44;
    CHAT_MESSAGE_TAUNT = 45;
    CHAT_MESSAGE_RANDOM = 46;
    CHAT_MESSAGE_RD_TURN = 47;
    CHAT_MESSAGE_DROP_RATE_BONUS = 49;
    CHAT_MESSAGE_NO_BATTLE_POINTS = 50;
    CHAT_MESSAGE_DENIED_AEGIS = 51;
    CHAT_MESSAGE_INFORMATIONAL = 52;
    CHAT_MESSAGE_AEGIS_STOLEN = 53;
    CHAT_MESSAGE_ROSHAN_CANDY = 54;
    CHAT_MESSAGE_ITEM_GIFTED = 55;
    CHAT_MESSAGE_HERO_KILL_WITH_GREEVIL = 56;
    CHAT_MESSAGE_HOLDOUT_TOWER_DESTROYED = 57;
    CHAT_MESSAGE_HOLDOUT_WALL_DESTROYED = 58;
    CHAT_MESSAGE_HOLDOUT_WALL_FINISHED = 59;
    CHAT_MESSAGE_PLAYER_LEFT_LIMITED_HERO = 62;
    CHAT_MESSAGE_ABANDON_LIMITED_HERO_EXPLANATION = 63;
    CHAT_MESSAGE_DISCONNECT_LIMITED_HERO = 64;
    CHAT_MESSAGE_LOW_PRIORITY_COMPLETED_EXPLANATION = 65;
    CHAT_MESSAGE_RECRUITMENT_DROP_RATE_BONUS = 66;
    CHAT_MESSAGE_FROSTIVUS_SHINING_BOOSTER_ACTIVE = 67;
    CHAT_MESSAGE_PLAYER_LEFT_AFK = 73;
    CHAT_MESSAGE_PLAYER_LEFT_DISCONNECTED_TOO_LONG = 74;
    CHAT_MESSAGE_PLAYER_ABANDONED = 75;
    CHAT_MESSAGE_PLAYER_ABANDONED_AFK = 76;
    CHAT_MESSAGE_PLAYER_ABANDONED_DISCONNECTED_TOO_LONG = 77;
    CHAT_MESSAGE_WILL_NOT_BE_SCORED = 78;
    CHAT_MESSAGE_WILL_NOT_BE_SCORED_RANKED = 79;
    CHAT_MESSAGE_WILL_NOT_BE_SCORED_NETWORK = 80;
    CHAT_MESSAGE_WILL_NOT_BE_SCORED_NETWORK_RANKED = 81;
    CHAT_MESSAGE_CAN_QUIT_WITHOUT_ABANDON = 82;
    CHAT_MESSAGE_RANKED_GAME_STILL_SCORED_LEAVERS_GET_LOSS = 83;
    CHAT_MESSAGE_ABANDON_RANKED_BEFORE_FIRST_BLOOD_PARTY = 84;
    CHAT_MESSAGE_COMPENDIUM_LEVEL = 85;
    CHAT_MESSAGE_VICTORY_PREDICTION_STREAK = 86;
    CHAT_MESSAGE_ASSASSIN_ANNOUNCE = 87;
    CHAT_MESSAGE_ASSASSIN_SUCCESS = 88;
    CHAT_MESSAGE_ASSASSIN_DENIED = 89;
    CHAT_MESSAGE_VICTORY_PREDICTION_SINGLE_USER_CONFIRM = 90;
    CHAT_MESSAGE_EFFIGY_KILL = 91;
    CHAT_MESSAGE_VOICE_TEXT_BANNED_OVERFLOW = 92;
    CHAT_MESSAGE_YEAR_BEAST_KILLED = 93;
    CHAT_MESSAGE_PAUSE_COUNTDOWN = 94;
    CHAT_MESSAGE_COINS_WAGERED = 95;
    CHAT_MESSAGE_HERO_NOMINATED_BAN = 96;
    CHAT_MESSAGE_HERO_BANNED = 97;
    CHAT_MESSAGE_HERO_BAN_COUNT = 98;
    CHAT_MESSAGE_RIVER_PAINTED = 99;
    CHAT_MESSAGE_SCAN_USED = 100;
    CHAT_MESSAGE_SHRINE_KILLED = 101;
    CHAT_MESSAGE_WAGER_TOKEN_SPENT = 102;
    CHAT_MESSAGE_RANK_WAGER = 103;
	CHAT_MESSAGE_NEW_PLAYER_REMINDER = 104;
    CHAT_MESSAGE_OBSERVER_WARD_KILLED = 105;
    CHAT_MESSAGE_SENTRY_WARD_KILLED = 106;
    CHAT_MESSAGE_ITEM_PLACED_IN_NEUTRAL_STASH = 107;
    CHAT_MESSAGE_HERO_CHOICE_INVALID = 108;
    CHAT_MESSAGE_BOUNTY = 109;
    CHAT_MESSAGE_ABILITY_DRAFT_START = 110;
    CHAT_MESSAGE_HERO_FOUND_CANDY = 111;
    CHAT_MESSAGE_ABILITY_DRAFT_RANDOMED = 112;
    CHAT_MESSAGE_PRIVATE_COACH_CONNECTED = 113;
}

enum DOTA_NO_BATTLE_POINTS_REASONS {
    NO_BATTLE_POINTS_WRONG_LOBBY_TYPE = 1;
    NO_BATTLE_POINTS_PRACTICE_BOTS = 2;
    NO_BATTLE_POINTS_CHEATS_ENABLED = 3;
    NO_BATTLE_POINTS_LOW_PRIORITY = 4;
}

enum DOTA_REPLAY_STATE_EVENT {
	DOTA_REPLAY_STATE_EVENT_GAME_START = 1;
	DOTA_REPLAY_STATE_EVENT_STARTING_HORN = 2;
	DOTA_REPLAY_STATE_EVENT_FIRST_BLOOD = 3;
    DOTA_REPLAY_STATE_EVENT_SHOWCASE = 4;
    DOTA_REPLAY_STATE_EVENT_POST_GAME = 5;
    DOTA_REPLAY_STATE_EVENT_WAIT_FOR_MAP = 6;
}

enum DOTA_CHAT_INFORMATIONAL {
    INFO_COOP_BATTLE_POINTS_RULES = 1;
    INFO_FROSTIVUS_ABANDON_REMINDER = 2;
    INFO_RANKED_REMINDER = 3;
    INFO_COOP_LOW_PRIORITY_PASSIVE_REMINDER = 4;
	INFO_CUSTOM_GAME_PENALTY_REMINDER = 5;
}

enum DOTA_ABILITY_PING_TYPE {
    ABILITY_PING_READY = 1;
    ABILITY_PING_MANA = 2;
    ABILITY_PING_COOLDOWN = 3;
    ABILITY_PING_ENEMY = 4;
    ABILITY_PING_UNLEARNED = 5;
    ABILITY_PING_INBACKPACK = 6;
	ABILITY_PING_INSTASH = 7;
	ABILITY_PING_ONCOURIER = 8;
	ABILITY_PING_ALLY = 9;
    ABILITY_PING_LEARN_READY = 10;
    ABILITY_PING_WILL_LEARN = 11;
    ABILITY_PING_FUTURE_LEARN = 12;
    ABILITY_PING_NEUTRAL_OFFER = 13;
    ABILITY_PING_NEUTRAL_REQUEST = 14;
    ABILITY_PING_NEUTRAL_EQUIP = 15;
}

enum EDotaEntityMessages {
    DOTA_UNIT_SPEECH = 0;
    DOTA_UNIT_SPEECH_MUTE = 1;
    DOTA_UNIT_ADD_GESTURE = 2;
    DOTA_UNIT_REMOVE_GESTURE = 3;
    DOTA_UNIT_REMOVE_ALL_GESTURES = 4;
    DOTA_UNIT_FADE_GESTURE = 6;
    DOTA_UNIT_SPEECH_CLIENTSIDE_RULES = 7;
}

enum DOTA_PARTICLE_MESSAGE {
    DOTA_PARTICLE_MANAGER_EVENT_CREATE = 0;
    DOTA_PARTICLE_MANAGER_EVENT_UPDATE = 1;
    DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD = 2;
    DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION = 3;
    DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK = 4;
    DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENT = 5;
    DOTA_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET = 6;
    DOTA_PARTICLE_MANAGER_EVENT_DESTROY = 7;
    DOTA_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING = 8;
    DOTA_PARTICLE_MANAGER_EVENT_RELEASE = 9;
    DOTA_PARTICLE_MANAGER_EVENT_LATENCY = 10;
    DOTA_PARTICLE_MANAGER_EVENT_SHOULD_DRAW = 11;
    DOTA_PARTICLE_MANAGER_EVENT_FROZEN = 12;
    DOTA_PARTICLE_MANAGER_EVENT_CHANGE_CONTROL_POINT_ATTACHMENT = 13;
    DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENTITY_POSITION = 14;
    DOTA_PARTICLE_MANAGER_EVENT_SET_FOW_PROPERTIES = 15;
	DOTA_PARTICLE_MANAGER_EVENT_SET_TEXT = 16;
	DOTA_PARTICLE_MANAGER_EVENT_SET_SHOULD_CHECK_FOW = 17;
    DOTA_PARTICLE_MANAGER_EVENT_SET_CONTROL_POINT_MODEL = 18;
    DOTA_PARTICLE_MANAGER_EVENT_SET_CONTROL_POINT_SNAPSHOT = 19;
    DOTA_PARTICLE_MANAGER_EVENT_SET_TEXTURE_ATTRIBUTE = 20;
    DOTA_PARTICLE_MANAGER_EVENT_SET_SCENE_OBJECT_GENERIC_FLAG = 21;
    DOTA_PARTICLE_MANAGER_EVENT_SET_SCENE_OBJECT_TINT_AND_DESAT = 22;
}

enum DOTA_OVERHEAD_ALERT {
    OVERHEAD_ALERT_GOLD = 0;
    OVERHEAD_ALERT_DENY = 1;
    OVERHEAD_ALERT_CRITICAL = 2;
    OVERHEAD_ALERT_XP = 3;
    OVERHEAD_ALERT_BONUS_SPELL_DAMAGE = 4;
    OVERHEAD_ALERT_MISS = 5;
    OVERHEAD_ALERT_DAMAGE = 6;
    OVERHEAD_ALERT_EVADE = 7;
    OVERHEAD_ALERT_BLOCK = 8;
    OVERHEAD_ALERT_BONUS_POISON_DAMAGE = 9;
    OVERHEAD_ALERT_HEAL = 10;
    OVERHEAD_ALERT_MANA_ADD = 11;
    OVERHEAD_ALERT_MANA_LOSS = 12;
    OVERHEAD_ALERT_LAST_HIT_EARLY = 13;
    OVERHEAD_ALERT_LAST_HIT_CLOSE = 14;
    OVERHEAD_ALERT_LAST_HIT_MISS = 15;
    OVERHEAD_ALERT_MAGICAL_BLOCK = 16;
    OVERHEAD_ALERT_INCOMING_DAMAGE = 17;
    OVERHEAD_ALERT_OUTGOING_DAMAGE = 18;
    OVERHEAD_ALERT_DISABLE_RESIST = 19;
	OVERHEAD_ALERT_DEATH = 20;
	OVERHEAD_ALERT_BLOCKED = 21;
    OVERHEAD_ALERT_ITEM_RECEIVED = 22;
    OVERHEAD_ALERT_SHARD = 23;
    OVERHEAD_ALERT_DEADLY_BLOW = 24;
}

enum DOTA_ROSHAN_PHASE {
    k_SRSP_ROSHAN_ALIVE = 0;
    k_SRSP_ROSHAN_BASE_TIMER = 1;
    k_SRSP_ROSHAN_VISIBLE_TIMER = 2;
}

enum DOTA_POSITION_CATEGORY {
    DOTA_POSITION_NONE = 0;
    DOTA_POSITION_BOTTOM_LANE = 1;
    DOTA_POSITION_MID_LANE = 2;
    DOTA_POSITION_TOP_LANE = 3;
    DOTA_POSITION_RADIANT_JUNGLE = 4;
    DOTA_POSITION_DIRE_JUNGLE = 5;
    DOTA_POSITION_RADIANT_ANCIENTS = 6;
    DOTA_POSITION_DIRE_ANCIENTS = 7;
    DOTA_POSITION_RADIANT_SECRET_SHOP = 8;
    DOTA_POSITION_DIRE_SECRET_SHOP = 9;
    DOTA_POSITION_RIVER = 10;
    DOTA_POSITION_ROSHAN_PIT = 11;
    DOTA_POSITION_RADIANT_BASE = 12;
    DOTA_POSITION_DIRE_BASE = 13;
    DOTA_POSITION_FOUNTAIN = 14;
    DOTA_POSITION_OTHER = 15;
}

enum DOTA_ABILITY_TARGET_TYPE {
    DOTA_ABILITY_TARGET_NONE = 0;
    DOTA_ABILITY_TARGET_SELF = 1;
    DOTA_ABILITY_TARGET_ALLY_HERO = 2;
    DOTA_ABILITY_TARGET_ALLY_CREEP = 3;
    DOTA_ABILITY_TARGET_ENEMY_HERO = 4;
    DOTA_ABILITY_TARGET_ENEMY_CREEP = 5;
}

enum EHeroStatType {
    k_EHeroStatType_None = 0;
    k_EHeroStatType_AxeTotalDamage = 2000;
    k_EHeroStatType_BattleHungerDamage = 2001;
    k_EHeroStatType_CounterHelixDamage = 2002;
    k_EHeroStatType_CullingBladeDamage = 2003;
    k_EHeroStatType_BerserkersCallCastCount = 2004;
    k_EHeroStatType_BerserkersCallHeroesHitAverage = 2005;
    k_EHeroStatType_BerserkersCallOtherUnitsHit = 2006;
    k_EHeroStatType_BerserkersCallHeroAttacksTaken = 2007;
    k_EHeroStatType_BerserkersCallOtherAttacksTaken = 2008;
    k_EHeroStatType_BattleHungerCastCount = 2009;
    k_EHeroStatType_BattleHungerPotentialDuration = 2010;
    k_EHeroStatType_BattleHungerAverageDuration = 2011;
    k_EHeroStatType_CounterHelixProcCount = 2012;
    k_EHeroStatType_CounterHelixHeroProcCount = 2013;
    k_EHeroStatType_CounterHelixHeroesHitAverage = 2014;
    k_EHeroStatType_CounterHelixOtherUnitsHitCount = 2015;
    k_EHeroStatType_CullingBladeCastCount = 2016;
    k_EHeroStatType_CullingBladeKillCount = 2017;
    k_EHeroStatType_CullingBladeAverageHealthCulled = 2018;
    k_EHeroStatType_CullingBladeAverageDamageAvailable = 2019;
    k_EHeroStatType_CullingBladeHeroBuffAverage = 2020;
}

enum EPlayerVoiceListenState {
    kPVLS_None = 0;
    kPVLS_DeniedChatBanned = 1;
    kPVLS_DeniedPartner = 2;
    kPVLS_DeniedHLTVTalkerNotSpectator = 3;
    kPVLS_DeniedHLTVNoTalkerPlayerID = 4;
    kPVLS_DeniedHLTVTalkerNotBroadcaster = 5;
    kPVLS_DeniedTeamSpectator = 6;
    kPVLS_DeniedStudent = 8;
    kPVLS_DeniedPrivateCoach = 9;
    kPVLS_Denied = 64;
    kPVLS_AllowHLTVTalkerIsBroadcaster = 65;
    kPVLS_AllowCoBroadcaster = 66;
    kPVLS_AllowAllChat = 67;
    kPVLS_AllowStudentToCoach = 68;
    kPVLS_AllowFellowStudent = 69;
    kPVLS_AllowTalkerIsCoach = 70;
    kPVLS_AllowCoachHearTeam = 71;
    kPVLS_AllowSameTeam = 72;
    kPVLS_AllowShowcase = 73;
    kPVLS_AllowPrivateCoach = 74;
}

enum EProjectionEvent {
    ePE_FirstBlood = 0;
    ePE_Killstreak_godlike = 1;
}

message CDOTAUserMsg_ChatEvent {
    optional DOTA_CHAT_MESSAGE type = 1 [default = CHAT_MESSAGE_INVALID];
    optional uint32 value = 2;
    optional sint32 playerid_1 = 3 [default = -1];
    optional sint32 playerid_2 = 4 [default = -1];
    optional sint32 playerid_3 = 5 [default = -1];
    optional sint32 playerid_4 = 6 [default = -1];
    optional sint32 playerid_5 = 7 [default = -1];
    optional sint32 playerid_6 = 8 [default = -1];
    optional uint32 value2 = 9;
    optional uint32 value3 = 10;
}

message CDOTAUserMsg_BotChat {
    optional uint32 player_id = 1;
    optional string format = 2;
    optional string message = 3;
    optional string target = 4;
    optional bool team_only = 5;
}

message CDOTAUserMsg_CombatLogBulkData {
	repeated CMsgDOTACombatLogEntry combat_entries = 1;
	optional float timestamp = 2;
	optional float duration = 3;
	optional uint32 player_id = 4;
}

message CDOTAUserMsg_MiniKillCamInfo {
    message Attacker {
        message Ability {
            optional uint32 ability_id = 1;
            optional int32 damage = 2;
        }

        optional uint32 attacker = 1;
        optional int32 total_damage = 2;
        repeated CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;
        optional string attacker_name = 4;
    }

    repeated CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;
}

message CDOTAUserMsg_GlobalLightColor {
    optional uint32 color = 1;
    optional float duration = 2;
}

message CDOTAUserMsg_GlobalLightDirection {
    optional networkbasetypes.CMsgVector direction = 1;
    optional float duration = 2;
}

message CDOTAUserMsg_LocationPing {
    optional uint32 player_id = 1;
    optional dota_commonmessages.CDOTAMsg_LocationPing location_ping = 2;
}

message CDOTAUserMsg_PingConfirmation {
    optional uint32 player_id_of_original_pinger = 1;
    optional uint32 entity_index = 2;
    optional uint32 icon_type = 3;
    optional networkbasetypes.CMsgVector location = 4;
}

message CDOTAUserMsg_EnemyItemAlert {
	optional uint32 player_id = 1;
	optional uint32 target_player_id = 2;
	optional int32 item_ability_id = 3;
    optional int32 rune_type = 4 [default = -1];
	optional int32 entity_id = 5;
	optional int32 item_level = 6 [default = -1];
	optional int32 primary_charges = 7 [default = -1];
	optional int32 secondary_charges = 8 [default = -1];
}

message CDOTAUserMsg_ModifierAlert {
	optional uint32 player_id = 1;
	optional string class_name = 2;
	optional uint32 stack_count = 3;
	optional bool is_debuff = 4;
	optional uint32 target_entindex = 5;
	optional float seconds_remaining = 6;
}

message CDOTAUserMsg_HPManaAlert {
    optional uint32 player_id = 1;
    optional uint32 target_entindex = 2;
	optional bool show_raw_values = 3;
}

message CDOTAUserMsg_GlyphAlert {
    optional uint32 player_id = 1;
    optional bool negative = 2;
}

message CDOTAUserMsg_RadarAlert {
    optional uint32 player_id = 1;
    optional bool negative = 2;
}

message CDOTAUserMsg_WillPurchaseAlert {
    optional int32 item_ability_id = 1;
    optional int32 player_id = 2;
    optional uint32 gold_remaining = 3;
    optional int32 suggestion_player_id = 4;
}

message CDOTAUserMsg_EmptyTeleportAlert {
    optional int32 source_player_id = 1;
    optional int32 target_player_id = 2;
    optional int32 cooldown_seconds = 3;
}

message CDOTAUserMsg_MarsArenaOfBloodAttack {
    optional int32 source_ehandle = 1;
    optional int32 target_ehandle = 2;
    optional int32 warrior_index = 3;
}

message CDOTAEntityMsg_InvokerSpellCast {
    optional networkbasetypes.CEntityMsg entity_msg = 1;
    optional int32 cast_activity = 2;
}

message CDOTAUserMsg_QuickBuyAlert {
    optional int32 player_id = 1;
    optional int32 item_ability_id = 2;
    optional int32 gold_cost = 3;
    optional int32 item_cooldown_seconds = 4;
    optional bool show_buyback = 5;
}

message CDOTAUserMsg_CourierKilledAlert {
	message LostItem {
		optional int32 item_ability_id = 1;
		optional uint32 quantity = 2;
	}

	optional uint32 team = 1;
	optional uint32 gold_value = 2;
	optional int32 entity_handle = 3;
	optional int32 timestamp = 4;
	repeated CDOTAUserMsg_CourierKilledAlert.LostItem lost_items = 5;
    optional int32 killer_player_id = 6;
    optional int32 owning_player_id = 7;
}

message CDOTAUserMsg_MinimapEvent {
    optional int32 event_type = 1;
    optional int32 entity_handle = 2;
    optional int32 x = 3;
    optional int32 y = 4;
    optional int32 duration = 5;
    optional int32 target_entity_handle = 6;
}

message CDOTAUserMsg_MapLine {
    optional int32 player_id = 1;
    optional dota_commonmessages.CDOTAMsg_MapLine mapline = 2;
}

message CDOTAUserMsg_CreateLinearProjectile {
    optional networkbasetypes.CMsgVector origin = 1;
    optional networkbasetypes.CMsgVector2D velocity = 2;
    optional int32 latency = 3;
    optional int32 entindex = 4;
    optional uint64 particle_index = 5;
    optional int32 handle = 6;
    optional networkbasetypes.CMsgVector2D acceleration = 7;
    optional float max_speed = 8;
    optional float fow_radius = 9;
    optional bool sticky_fow_reveal = 10;
	optional float distance = 11;
    optional fixed32 colorgemcolor = 12;
}

message CDOTAUserMsg_DestroyLinearProjectile {
    optional int32 handle = 1;
}

message CDOTAUserMsg_DodgeTrackingProjectiles {
    required int32 entindex = 1;
    optional bool attacks_only = 2;
}

message CDOTAUserMsg_SpectatorPlayerClick {
    required int32 entindex = 1;
    optional int32 order_type = 2;
    optional int32 target_index = 3;
}

message CDOTAUserMsg_SpectatorPlayerUnitOrders {
    optional int32 entindex = 1;
    optional int32 order_type = 2;
    repeated int32 units = 3;
    optional int32 target_index = 4;
    optional int32 ability_id = 5;
    optional networkbasetypes.CMsgVector position = 6;
    optional bool queue = 7;
    optional int32 sequence_number = 8;
    optional uint32 flags = 9;
}

message CDOTAUserMsg_NevermoreRequiem {
    optional int32 entity_handle = 1;
    optional int32 lines = 2;
    optional networkbasetypes.CMsgVector origin = 3;
    optional bool reverse = 4;
}

message CDOTAUserMsg_HudError {
    optional int32 order_id = 1;
}

message CDOTAUserMsg_SharedCooldown {
    optional int32 entindex = 1;
    optional string name = 2;
    optional float cooldown = 3;
    optional int32 name_index = 4;
}

message CDOTAUserMsg_HalloweenDrops {
    repeated uint32 item_defs = 1;
    repeated uint32 player_ids = 2;
    optional uint32 prize_list = 3;
}

message CDOTAUserMsg_PredictionResult {
    message Prediction {
        enum EResult {
            k_eResult_ItemGranted = 1;
            k_eResult_Destroyed = 2;
        }

        optional uint32 item_def = 1;
        optional uint32 num_correct = 2;
        optional uint32 num_fails = 3;
        optional CDOTAUserMsg_PredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
        repeated uint32 granted_item_defs = 6;
    }

    optional uint32 account_id = 1;
    optional uint64 match_id = 2;
    optional bool correct = 3;
    repeated CDOTAUserMsg_PredictionResult.Prediction predictions = 4;
}

message CDOTAResponseQuerySerialized {
    message Fact {
        enum ValueType {
            NUMERIC = 1;
            STRING = 2;
        }

        required int32 key = 1;
        optional CDOTAResponseQuerySerialized.Fact.ValueType valtype = 2 [default = NUMERIC];
        optional float val_numeric = 3;
        optional string val_string = 4;
    }

    repeated CDOTAResponseQuerySerialized.Fact facts = 1;
}

message CDOTASpeechMatchOnClient {
    optional int32 concept = 1;
    optional int32 recipient_type = 2;
    optional CDOTAResponseQuerySerialized responsequery = 3;
    optional sfixed32 randomseed = 4 [default = 0];
}

message CDOTAUserMsg_UnitEvent {
    message Interval {
        optional float start = 1;
        optional float range = 2;
    }

    message Speech {
        optional int32 concept = 1;
        optional string response = 2;
        optional int32 recipient_type = 3;
        optional int32 level = 4;
        optional bool muteable = 5 [default = false];
        optional CDOTAUserMsg_UnitEvent.Interval predelay = 6;
        optional uint32 flags = 7;
    }

    message SpeechMute {
        optional float delay = 1 [default = 0.5];
    }

    message AddGesture {
        optional int32 activity = 1;
        optional int32 slot = 2;
        optional float fade_in = 3 [default = 0];
        optional float fade_out = 4 [default = 0.1];
        optional float playback_rate = 5 [default = 1];
        optional int32 sequence_variant = 6;
    }

    message RemoveGesture {
        optional int32 activity = 1;
    }

    message BloodImpact {
        optional int32 scale = 1;
        optional int32 x_normal = 2;
        optional int32 y_normal = 3;
    }

    message FadeGesture {
        optional int32 activity = 1;
    }

    required EDotaEntityMessages msg_type = 1 [default = DOTA_UNIT_SPEECH];
    required int32 entity_index = 2;
    optional CDOTAUserMsg_UnitEvent.Speech speech = 3;
    optional CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;
    optional CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;
    optional CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;
    optional CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;
    optional CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;
    optional CDOTASpeechMatchOnClient speech_match_on_client = 9;
}

message CDOTAUserMsg_ItemPurchased {
    optional int32 item_ability_id = 1;
}

message CDOTAUserMsg_ItemSold {
    optional int32 item_ability_id = 1;
}

message CDOTAUserMsg_ParticleManager {
    message ReleaseParticleIndex {
    }

    message CreateParticle {
        optional fixed64 particle_name_index = 1;
        optional int32 attach_type = 2;
        optional int32 entity_handle = 3;
        optional int32 entity_handle_for_modifiers = 4;
        optional bool apply_voice_ban_rules = 5;
        optional int32 team_behavior = 6;
    }

    message DestroyParticle {
        optional bool destroy_immediately = 1;
    }

    message DestroyParticleInvolving {
        optional bool destroy_immediately = 1;
        optional int32 entity_handle = 3;
    }

    message UpdateParticle {
        optional int32 control_point = 1;
        optional networkbasetypes.CMsgVector position = 2;
    }

    message UpdateParticleFwd {
        optional int32 control_point = 1;
        optional networkbasetypes.CMsgVector forward = 2;
    }

    message UpdateParticleOrient {
        optional int32 control_point = 1;
        optional networkbasetypes.CMsgVector forward = 2;
        optional networkbasetypes.CMsgVector right = 3 [deprecated = true];
        optional networkbasetypes.CMsgVector up = 4;
        optional networkbasetypes.CMsgVector left = 5;
    }

    message UpdateParticleFallback {
        optional int32 control_point = 1;
        optional networkbasetypes.CMsgVector position = 2;
    }

    message UpdateParticleOffset {
        optional int32 control_point = 1;
        optional networkbasetypes.CMsgVector origin_offset = 2;
        optional networkbasetypes.CMsgQAngle angle_offset = 3;
    }

    message UpdateParticleEnt {
        optional int32 control_point = 1;
        optional int32 entity_handle = 2;
        optional int32 attach_type = 3;
        optional int32 attachment = 4;
        optional networkbasetypes.CMsgVector fallback_position = 5;
        optional bool include_wearables = 6;
    }

    message UpdateParticleSetFrozen {
        optional bool set_frozen = 1;
    }

    message UpdateParticleShouldDraw {
        optional bool should_draw = 1;
    }

    message ChangeControlPointAttachment {
        optional int32 attachment_old = 1;
        optional int32 attachment_new = 2;
        optional int32 entity_handle = 3;
    }

    message UpdateEntityPosition {
        optional int32 entity_handle = 1;
        optional networkbasetypes.CMsgVector position = 2;
    }

    message SetParticleFoWProperties {
        optional int32 fow_control_point = 1;
        optional int32 fow_control_point2 = 2;
        optional float fow_radius = 3;
    }

    message SetParticleShouldCheckFoW {
        optional bool check_fow = 1;
    }

    message SetControlPointModel {
        optional int32 control_point = 1;
        optional string model_name = 2;
    }

    message SetControlPointSnapshot {
        optional int32 control_point = 1;
        optional string snapshot_name = 2;
    }

    message SetParticleText {
        optional string text = 1;
    }

    message SetTextureAttribute {
        optional string attribute_name = 1;
        optional string texture_name = 2;
    }

    message SetSceneObjectGenericFlag {
        optional bool flag_value = 1;
    }

    message SetSceneObjectTintAndDesat {
        optional fixed32 tint = 1;
        optional float desat = 2;
    }

    required DOTA_PARTICLE_MESSAGE type = 1 [default = DOTA_PARTICLE_MANAGER_EVENT_CREATE];
    required uint32 index = 2;
    optional CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
    optional CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;
    optional CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
    optional CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
    optional CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;
    optional CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
    optional CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
    optional CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
    optional CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
    optional CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
    optional CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
    optional CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
    optional CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment change_control_point_attachment = 16;
    optional CDOTAUserMsg_ParticleManager.UpdateEntityPosition update_entity_position = 17;
    optional CDOTAUserMsg_ParticleManager.SetParticleFoWProperties set_particle_fow_properties = 18;
    optional CDOTAUserMsg_ParticleManager.SetParticleText set_particle_text = 19;
    optional CDOTAUserMsg_ParticleManager.SetParticleShouldCheckFoW set_particle_should_check_fow = 20;
    optional CDOTAUserMsg_ParticleManager.SetControlPointModel set_control_point_model = 21;
    optional CDOTAUserMsg_ParticleManager.SetControlPointSnapshot set_control_point_snapshot = 22;
    optional CDOTAUserMsg_ParticleManager.SetTextureAttribute set_texture_attribute = 23;
    optional CDOTAUserMsg_ParticleManager.SetSceneObjectGenericFlag set_scene_object_generic_flag = 24;
    optional CDOTAUserMsg_ParticleManager.SetSceneObjectTintAndDesat set_scene_object_tint_and_desat = 25;

}

message CDOTAUserMsg_OverheadEvent {
    optional DOTA_OVERHEAD_ALERT message_type = 1 [default = OVERHEAD_ALERT_GOLD];
    optional int32 value = 2;
    optional int32 target_player_entindex = 3;
    optional int32 target_entindex = 4;
    optional int32 source_player_entindex = 5;
}

message CDOTAUserMsg_WorldLine {
    optional int32 player_id = 1;
    optional dota_commonmessages.CDOTAMsg_WorldLine worldline = 2;
}

message CDOTAUserMsg_ChatWheel {
    optional uint32 chat_message_id = 1;
    optional uint32 player_id = 2;
    optional uint32 account_id = 3;
    optional uint32 param_hero_id = 4;
    optional uint32 emoticon_id = 5;
}

message CDOTAUserMsg_GamerulesStateChanged {
    optional uint32 state = 1;
}

message CDOTAUserMsg_SendStatPopup {
    optional int32 player_id = 1;
    optional dota_commonmessages.CDOTAMsg_SendStatPopup statpopup = 2;
}

message CDOTAUserMsg_DismissAllStatPopups {
	optional dota_commonmessages.CDOTAMsg_DismissAllStatPopups dismissallmsg = 1;
}

message CDOTAUserMsg_SendRoshanSpectatorPhase {
    optional DOTA_ROSHAN_PHASE phase = 1 [default = k_SRSP_ROSHAN_ALIVE];
    optional int32 phase_start_time = 2;
    optional int32 phase_length = 3;
}

message CDOTAUserMsg_SendRoshanPopup {
    optional bool reclaimed = 1;
    optional int32 gametime = 2;
}

message CDOTAUserMsg_TE_Projectile {
    optional int32 hSource = 1;
    optional int32 hTarget = 2;
    optional int32 moveSpeed = 3;
    optional int32 sourceAttachment = 4;
    optional int64 particleSystemHandle = 5;
    optional bool dodgeable = 6;
    optional bool isAttack = 7;
    optional bool isEvaded = 8;
    optional float expireTime = 9;
    optional float maximpacttime = 10;
    optional fixed32 colorgemcolor = 11;
    optional int32 launch_tick = 12;
	optional int32 handle = 13;
	optional networkbasetypes.CMsgVector vTargetLoc = 14;
}

message CDOTAUserMsg_TE_ProjectileLoc {
    optional networkbasetypes.CMsgVector vSourceLoc = 1;
    optional int32 hTarget = 2;
    optional int32 moveSpeed = 3;
    optional int64 particleSystemHandle = 4;
    optional bool dodgeable = 5;
    optional bool isAttack = 6;
    optional bool isEvaded = 8;
    optional float expireTime = 9;
    optional networkbasetypes.CMsgVector vTargetLoc = 10;
    optional fixed32 colorgemcolor = 11;
    optional int32 launch_tick = 12;
	optional int32 handle = 13;
}

message CDOTAUserMsg_TE_DestroyProjectile {
	optional int32 handle = 1;
}

message CDOTAUserMsg_TE_DotaBloodImpact {
    optional int32 entity = 1;
    optional float scale = 2;
    optional float xnormal = 3;
    optional float ynormal = 4;
}

message CDOTAUserMsg_AbilityPing {
    optional uint32 player_id = 1;
    optional uint32 ability_id = 2;
    optional DOTA_ABILITY_PING_TYPE type = 3 [default = ABILITY_PING_READY];
    optional uint32 cooldown_seconds = 4;
    optional uint32 level = 5;
    optional bool passive = 6;
    optional uint32 mana_needed = 7;
    optional uint32 entity_id = 8;
    optional int32 primary_charges = 9;
    optional int32 secondary_charges = 10;
    optional uint32 caster_id = 11;
    optional bool ctrl_held = 12;
}

message CDOTAUserMsg_TE_UnitAnimation {
    optional int32 entity = 1;
    optional int32 sequenceVariant = 2;
    optional float playbackrate = 3;
    optional float castpoint = 4;
    optional int32 type = 5;
    optional int32 activity = 6;
}

message CDOTAUserMsg_TE_UnitAnimationEnd {
    optional int32 entity = 1;
    optional bool snap = 2;
}

message CDOTAUserMsg_AbilitySteal {
    optional uint32 player_id = 1;
    optional uint32 ability_id = 2;
    optional uint32 ability_level = 3;
}

message CDOTAUserMsg_StatsHeroLookup {
    optional int32 player_id = 1;
    optional int32 hero_id = 2;
    optional string hero_name = 3;
    optional string persona = 4;
}

message CDOTAUserMsg_StatsHeroPositionInfo {
    message PositionPair {
        optional DOTA_POSITION_CATEGORY position_category = 1 [default = DOTA_POSITION_NONE];
        optional uint32 position_count = 2;
    }

    optional float average_position = 1;
    repeated CDOTAUserMsg_StatsHeroPositionInfo.PositionPair position_details = 2;
}

message CDOTAUserMsg_StatsPlayerKillShare {
    optional int32 player_id = 1;
    optional float kill_share_percent = 2;
    optional float player_loc_x = 3;
    optional float player_loc_y = 4;
    optional float health_percent = 5;
    optional float mana_percent = 6;
}

message CDOTAUserMsg_StatsKillDetails {
    optional uint32 victim_id = 1;
    repeated CDOTAUserMsg_StatsPlayerKillShare kill_shares = 2;
    optional uint32 damage_to_kill = 3;
    optional uint32 effective_health = 4;
    optional float death_time = 5;
    optional uint32 killer_id = 6;
}

message CMsgHeroAbilityStat {
    optional EHeroStatType stat_type = 1 [default = k_EHeroStatType_None];
    optional int32 int_value = 2;
    optional float float_value = 3;
}

message CMsgCombatAnalyzerPlayerStat {
    optional uint32 account_id = 1;
    repeated CMsgHeroAbilityStat hero_ability_stats = 2;
}

message CMsgCombatAnalyzerStats {
    optional uint64 match_id = 1;
    repeated CMsgCombatAnalyzerPlayerStat player_stats = 2;
}

message CDOTAUserMsg_ProjectionAbility {
    optional uint32 ability_id = 1;
    optional int32 caster_ent_index = 2;
    optional int32 caster_team = 3;
    optional bool channel_end = 4;
    optional networkbasetypes.CMsgVector origin = 5;
    optional bool track_caster_only = 6;
    optional float end_time = 7;
    optional int32 victim_ent_index = 8;
}

message CDOTAUserMsg_ProjectionEvent {
    optional EProjectionEvent event_id = 1 [default = ePE_FirstBlood];
    optional uint32 team = 2;
}

message CDOTAUserMsg_XPAlert {
	optional uint32 player_id = 1;
	optional uint32 target_entindex = 2;
}

message CDOTAUserMsg_TalentTreeAlert {
    optional uint32 player_id = 1;
    optional uint32 target_entindex = 2;
    optional int32 ability_id = 3;
    optional int32 slot = 4;
    optional bool learned = 5;
}

message CDOTAUserMsg_UpdateQuestProgress {
}

message CDOTAUserMsg_SelectPenaltyGold {
    required uint32 player_id = 1;
    optional sint32 cost = 2;
}

message CDOTAUserMsg_RollDiceResult {
    optional uint32 player_id = 1;
    optional uint32 channel_type = 2;
    optional uint32 roll_min = 3;
    optional uint32 roll_max = 4;
    optional uint32 result = 5;
}

message CDOTAUserMsg_FlipCoinResult {
    optional uint32 player_id = 1;
    optional uint32 channel_type = 2;
    optional bool result = 3;
}

message CDOTAUserMessage_TeamCaptainChanged {
    optional uint32 team = 1;
    optional uint32 captain_player_id = 2;
}

message CDOTAUserMsg_HeroRelicProgress {
	optional uint32 hero_relic_type = 1;
	optional uint32 value = 2;
	optional uint32 ehandle = 3;
	optional uint32 event_id = 4;
}

message CDOTAUserMsg_DamageReport {
    optional uint32 player_id = 1;
    optional uint32 target_hero_id = 2;
    optional uint32 source_hero_id = 3;
    optional int32 damage_amount = 4;
    optional bool broadcast = 5;
}

message CDOTAUserMsg_SalutePlayer {
    optional int32 source_player_id = 1;
    optional int32 target_player_id = 2;
    optional uint32 tip_amount = 3;
    optional uint32 event_id = 4;
}

message CDOTAUserMsg_TipAlert {
    optional uint32 player_id = 1;
    optional string tip_text = 2;
}

message CDOTAUserMsg_ESArcanaCombo {
    optional uint32 ehandle = 1;
    optional uint32 combo_count = 2;
    optional uint32 arcana_level = 3;
}

message CDOTAUserMsg_ESArcanaComboSummary {
    optional uint32 ehandle = 1;
    optional uint32 combo_count = 2;
    optional uint32 damage_amount = 3;
}

message CDOTAUserMsg_OMArcanaCombo {
    optional uint32 ehandle = 1;
    optional uint32 multicast_amount = 2;
    optional uint32 arcana_level = 3;
    optional uint32 multicast_chance = 4;
}

message CDOTAUserMsg_HighFiveCompleted {
    optional uint32 player_id_1 = 1;
    optional uint32 player_id_2 = 2;
    optional bool special_high_five = 3;
}

message CDOTAUserMsg_HighFiveLeftHanging {
    optional uint32 player_id = 1;
}

message CDOTAUserMsg_ShovelUnearth {
    optional uint32 player_id = 1;
    optional bool all_chat = 2;
    optional string locstring = 3;
    optional uint32 quantity = 4;
}

message CDOTAUserMsg_AllStarEvent {
    message PlayerScore {
        optional int32 player_id = 1;
        optional uint32 score_sans_kda = 2;
    }

    optional int32 source_player_id = 1;
    optional int32 target_player_id = 2;
    optional uint32 point_amount = 3;
    optional uint32 event_id = 4;
    repeated CDOTAUserMsg_AllStarEvent.PlayerScore player_scores = 5;
}

message CDOTAUserMsg_QueuedOrderRemoved {
    repeated uint32 unit_order_sequence = 1;
}

message CDOTAUserMsg_DebugChallenge {
    required uint32 challenge_type = 1;
    required uint32 challenge_query_id = 2;
    required uint32 event_id = 3;
    optional uint32 instance_id = 4;
    optional uint32 challenge_var_0 = 5;
    optional uint32 challenge_var_1 = 6;
    optional uint32 challenge_max_rank = 7;
}

message CDOTAUserMsg_FoundNeutralItem {
    optional uint32 player_id = 1;
    optional uint32 item_ability_id = 2;
    optional uint32 item_tier = 3;
    optional uint32 tier_item_count = 4;
}

message CDOTAUserMsg_OutpostCaptured {
    optional uint32 outpost_entindex = 1;
    optional uint32 team_id = 2;
}

message CDOTAUserMsg_OutpostGrantedXP {
    optional uint32 team_id = 1;
    optional uint32 xp_amount = 2;
}

message CDOTAUserMsg_MoveCameraToUnit {
    optional int32 unit_ehandle = 1;
}

message CDOTAUserMsg_PauseMinigameData {
    message DataBit {
        optional uint32 index = 1;
        optional int32 data = 2;
        optional int64 data_extra = 3;
    }

    repeated CDOTAUserMsg_PauseMinigameData.DataBit data_bits = 1;
}

message CDOTAUserMsg_VersusScene_PlayerBehavior {
    optional uint32 player_id = 1;
    optional dota_commonmessages.EDOTAVersusScenePlayerBehavior behavior = 2 [default = VS_PLAYER_BEHAVIOR_PLAY_ACTIVITY];
    optional dota_commonmessages.VersusScene_PlayActivity play_activity = 3;
    optional dota_commonmessages.VersusScene_ChatWheel chat_wheel = 4;
    optional dota_commonmessages.VersusScene_PlaybackRate playback_rate = 5;
}

message CDOTAUserMsg_QoP_ArcanaSummary {
    optional uint32 ehandle = 1;
    optional uint32 arcana_level = 2;
    optional uint32 players_hit = 3;
    optional uint32 players_killed = 4;
}

message CDOTAUserMsg_HotPotato_Created {
    optional uint32 player_id_1 = 1;
    optional uint32 player_id_2 = 2;
}

message CDOTAUserMsg_HotPotato_Exploded {
    optional uint32 player_id = 1;
}

message CDOTAUserMsg_WK_Arcana_Progress {
    optional uint32 ehandle = 1;
    optional uint32 arcana_level = 2;
    optional uint32 hero_id = 3;
}

message CDOTAUserMsg_GuildChallenge_Progress {
    message PlayerProgress {
        optional uint32 player_id = 1;
        optional uint32 progress = 6;
    }

    enum EChallengeType {
        k_EChallengeType_Invalid = 0;
        k_EChallengeType_Cooperative = 1;
        k_EChallengeType_Contract = 2;
    }

    repeated CDOTAUserMsg_GuildChallenge_Progress.PlayerProgress player_progress = 1;
    optional uint32 guild_id = 2;
    optional uint32 challenge_instance_id = 3;
    optional uint32 challenge_parameter = 4;
    optional CDOTAUserMsg_GuildChallenge_Progress.EChallengeType challenge_type = 5 [default = k_EChallengeType_Invalid];
    optional uint32 challenge_progress_at_start = 7;
    optional bool complete = 8;
}

message CDOTAUserMsg_WRArcanaProgress {
    optional uint32 ehandle = 1;
    optional uint32 target_ehandle = 2;
    optional uint32 arrows_landed = 3;
    optional uint32 damage_dealt = 4;
    optional uint32 target_hp = 5;
    optional uint32 target_max_hp = 6;
    optional uint32 arcana_level = 7;
}

message CDOTAUserMsg_WRArcanaSummary {
    optional uint32 ehandle = 1;
    optional uint32 target_ehandle = 2;
    optional uint32 arrows_landed = 3;
    optional uint32 damage_dealt = 4;
    optional uint32 target_hp = 5;
    optional uint32 target_max_hp = 6;
    optional uint32 arcana_level = 7;
    optional bool success = 8;
}

message CDOTAUserMsg_EmptyItemSlotAlert {
    optional int32 source_player_id = 1;
    optional int32 target_player_id = 2;
    optional int32 slot_index = 3;
    optional int32 cooldown_seconds = 4;
}

message CDOTAUserMsg_AghsStatusAlert {
    optional uint32 source_player_id = 1;
    optional uint32 target_player_id = 2;
    optional uint32 target_entindex = 3;
    optional uint32 alert_type = 4;
    optional bool has_scepter = 5;
    optional bool has_shard = 6;
}

message CDOTAUserMsg_MutedPlayers {
    repeated int32 text_muted_player_ids = 1;
    repeated int32 voice_muted_player_ids = 2;
}

message CDOTAUserMsg_ContextualTip {
    optional int32 tip_id = 1;
    repeated string referenced_abilities = 2;
    repeated string referenced_units = 3;
    repeated string panorama_classes = 4;
    optional bool force_annotation = 5;
    optional int32 variant = 6;
    optional int32 int_param = 7;
    optional int32 int_param2 = 8;
    optional float float_param = 9;
    optional float float_param2 = 10;
    optional string string_param = 11;
    optional string string_param2 = 12;
    optional string tip_text_override = 13;
    optional string tip_annotation_override = 14;
    optional string panorama_snippet = 15;
}

message CDOTAUserMsg_ChatMessage {
    optional int32 source_player_id = 1;
    optional uint32 channel_type = 2;
    optional string message_text = 3;
}

message CMsgDOTACombatLogEntry {
    optional DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_DAMAGE];
	optional uint32 target_name = 2;
	optional uint32 target_source_name = 3;
	optional uint32 attacker_name = 4;
	optional uint32 damage_source_name = 5;
	optional uint32 inflictor_name = 6;
	optional bool is_attacker_illusion = 7;
	optional bool is_attacker_hero = 8;
	optional bool is_target_illusion = 9;
	optional bool is_target_hero = 10;
	optional bool is_visible_radiant = 11;
	optional bool is_visible_dire = 12;
	optional uint32 value = 13;
	optional int32 health = 14;
	optional float timestamp = 15;
	optional float stun_duration = 16;
	optional float slow_duration = 17;
	optional bool is_ability_toggle_on = 18;
	optional bool is_ability_toggle_off = 19;
	optional uint32 ability_level = 20;
	optional float location_x = 21;
	optional float location_y = 22;
	optional uint32 gold_reason = 23;
	optional float timestamp_raw = 24;
	optional float modifier_duration = 25;
	optional uint32 xp_reason = 26;
	optional uint32 last_hits = 27;
	optional uint32 attacker_team = 28;
	optional uint32 target_team = 29;
	optional uint32 obs_wards_placed = 30;
	optional uint32 assist_player0 = 31;
	optional uint32 assist_player1 = 32;
	optional uint32 assist_player2 = 33;
	optional uint32 assist_player3 = 34;
	optional uint32 stack_count = 35;
	optional bool hidden_modifier = 36;
	optional bool is_target_building = 37;
	optional uint32 neutral_camp_type = 38;
	optional uint32 rune_type = 39;
	repeated uint32 assist_players = 40;
	optional bool is_heal_save = 41;
	optional bool is_ultimate_ability = 42;
	optional uint32 attacker_hero_level = 43;
	optional uint32 target_hero_level = 44;
	optional uint32 xpm = 45;
	optional uint32 gpm = 46;
	optional uint32 event_location = 47;
	optional bool target_is_self = 48;
	optional uint32 damage_type = 49;
	optional bool invisibility_modifier = 50;
	optional uint32 damage_category = 51;
	optional uint32 networth = 52;
	optional uint32 building_type = 53;
	optional float modifier_elapsed_duration = 54;
	optional bool silence_modifier = 55;
	optional bool heal_from_lifesteal = 56;
	optional bool modifier_purged = 57;
	optional bool spell_evaded = 58;
	optional bool motion_controller_modifier = 59;
	optional bool long_range_kill = 60;
	optional uint32 modifier_purge_ability = 61;
	optional uint32 modifier_purge_npc = 62;
	optional bool root_modifier = 63;
	optional uint32 total_unit_death_count = 64;
	optional bool aura_modifier = 65;
	optional bool armor_debuff_modifier = 66;
	optional bool no_physical_damage_modifier = 67;
	optional uint32 modifier_ability = 68;
	optional bool modifier_hidden = 69;
	optional bool inflictor_is_stolen_ability = 70;
	optional uint32 kill_eater_event = 71;
	optional uint32 unit_status_label = 72;
    optional bool spell_generated_attack = 73;
    optional bool at_night_time = 74;
    optional bool attacker_has_scepter = 75;
}

enum EDotaUserMessages {
	DOTA_UM_AddUnitToSelection = 464;
	DOTA_UM_AIDebugLine = 465;
	DOTA_UM_ChatEvent = 466;
	DOTA_UM_CombatHeroPositions = 467;
	DOTA_UM_CombatLogData = 468;
	DOTA_UM_CombatLogBulkData = 470;
	DOTA_UM_CreateLinearProjectile = 471;
	DOTA_UM_DestroyLinearProjectile = 472;
	DOTA_UM_DodgeTrackingProjectiles = 473;
	DOTA_UM_GlobalLightColor = 474;
	DOTA_UM_GlobalLightDirection = 475;
	DOTA_UM_InvalidCommand = 476;
	DOTA_UM_LocationPing = 477;
	DOTA_UM_MapLine = 478;
	DOTA_UM_MiniKillCamInfo = 479;
	DOTA_UM_MinimapDebugPoint = 480;
	DOTA_UM_MinimapEvent = 481;
	DOTA_UM_NevermoreRequiem = 482;
	DOTA_UM_OverheadEvent = 483;
	DOTA_UM_SetNextAutobuyItem = 484;
	DOTA_UM_SharedCooldown = 485;
	DOTA_UM_SpectatorPlayerClick = 486;
	DOTA_UM_TutorialTipInfo = 487;
	DOTA_UM_UnitEvent = 488;
	DOTA_UM_ParticleManager = 489;
	DOTA_UM_BotChat = 490;
	DOTA_UM_HudError = 491;
	DOTA_UM_ItemPurchased = 492;
	DOTA_UM_Ping = 493;
	DOTA_UM_ItemFound = 494;
	DOTA_UM_CharacterSpeakConcept = 495;
	DOTA_UM_SwapVerify = 496;
	DOTA_UM_WorldLine = 497;
	DOTA_UM_TournamentDrop = 498;
	DOTA_UM_ItemAlert = 499;
	DOTA_UM_HalloweenDrops = 500;
	DOTA_UM_ChatWheel = 501;
	DOTA_UM_ReceivedXmasGift = 502;
	DOTA_UM_UpdateSharedContent = 503;
	DOTA_UM_TutorialRequestExp = 504;
	DOTA_UM_TutorialPingMinimap = 505;
	DOTA_UM_GamerulesStateChanged = 506;
	DOTA_UM_ShowSurvey = 507;
	DOTA_UM_TutorialFade = 508;
	DOTA_UM_AddQuestLogEntry = 509;
	DOTA_UM_SendStatPopup = 510;
	DOTA_UM_TutorialFinish = 511;
	DOTA_UM_SendRoshanPopup = 512;
	DOTA_UM_SendGenericToolTip = 513;
	DOTA_UM_SendFinalGold = 514;
	DOTA_UM_CustomMsg = 515;
	DOTA_UM_CoachHUDPing = 516;
	DOTA_UM_ClientLoadGridNav = 517;
	DOTA_UM_TE_Projectile = 518;
	DOTA_UM_TE_ProjectileLoc = 519;
	DOTA_UM_TE_DotaBloodImpact = 520;
	DOTA_UM_TE_UnitAnimation = 521;
	DOTA_UM_TE_UnitAnimationEnd = 522;
	DOTA_UM_AbilityPing = 523;
	DOTA_UM_ShowGenericPopup = 524;
	DOTA_UM_VoteStart = 525;
	DOTA_UM_VoteUpdate = 526;
	DOTA_UM_VoteEnd = 527;
	DOTA_UM_BoosterState = 528;
	DOTA_UM_WillPurchaseAlert = 529;
	DOTA_UM_TutorialMinimapPosition = 530;
	DOTA_UM_PlayerMMR = 531;
	DOTA_UM_AbilitySteal = 532;
	DOTA_UM_CourierKilledAlert = 533;
	DOTA_UM_EnemyItemAlert = 534;
	DOTA_UM_StatsMatchDetails = 535;
	DOTA_UM_MiniTaunt = 536;
	DOTA_UM_BuyBackStateAlert = 537;
	DOTA_UM_SpeechBubble = 538;
	DOTA_UM_CustomHeaderMessage = 539;
	DOTA_UM_QuickBuyAlert = 540;
	DOTA_UM_StatsHeroDetails = 541;
	DOTA_UM_PredictionResult = 542;
	DOTA_UM_ModifierAlert = 543;
	DOTA_UM_HPManaAlert = 544;
	DOTA_UM_GlyphAlert = 545;
	DOTA_UM_BeastChat = 546;
	DOTA_UM_SpectatorPlayerUnitOrders = 547;
	DOTA_UM_CustomHudElement_Create = 548;
	DOTA_UM_CustomHudElement_Modify = 549;
	DOTA_UM_CustomHudElement_Destroy = 550;
	DOTA_UM_CompendiumState = 551;
	DOTA_UM_ProjectionAbility = 552;
	DOTA_UM_ProjectionEvent = 553;
	DOTA_UM_CombatLogDataHLTV = 554;
	DOTA_UM_XPAlert = 555;
	DOTA_UM_UpdateQuestProgress = 556;
	DOTA_UM_MatchMetadata = 557;
	DOTA_UM_MatchDetails = 558;
	DOTA_UM_QuestStatus = 559;
	DOTA_UM_SuggestHeroPick = 560;
	DOTA_UM_SuggestHeroRole = 561;
	DOTA_UM_KillcamDamageTaken = 562;
	DOTA_UM_SelectPenaltyGold = 563;
	DOTA_UM_RollDiceResult = 564;
	DOTA_UM_FlipCoinResult = 565;
	DOTA_UM_RequestItemSuggestions = 566;
	DOTA_UM_TeamCaptainChanged = 567;
	DOTA_UM_SendRoshanSpectatorPhase = 568;
	DOTA_UM_ChatWheelCooldown = 569;
	DOTA_UM_DismissAllStatPopups = 570;
	DOTA_UM_TE_DestroyProjectile = 571;
    DOTA_UM_HeroRelicProgress = 572;
	DOTA_UM_AbilityDraftRequestAbility = 573;
	DOTA_UM_ItemSold = 574;
	DOTA_UM_DamageReport = 575;
	DOTA_UM_SalutePlayer = 576;
    DOTA_UM_TipAlert = 577;
    DOTA_UM_ReplaceQueryUnit = 578;
    DOTA_UM_EmptyTeleportAlert = 579;
    DOTA_UM_MarsArenaOfBloodAttack = 580;
    DOTA_UM_ESArcanaCombo = 581;
    DOTA_UM_ESArcanaComboSummary = 582;
    DOTA_UM_HighFiveLeftHanging = 583;
    DOTA_UM_HighFiveCompleted = 584;
    DOTA_UM_ShovelUnearth = 585;
    DOTA_EM_InvokerSpellCast = 586;
    DOTA_UM_RadarAlert = 587;
    DOTA_UM_AllStarEvent = 588;
    DOTA_UM_TalentTreeAlert = 589;
    DOTA_UM_QueuedOrderRemoved = 590;
    DOTA_UM_DebugChallenge = 591;
    DOTA_UM_OMArcanaCombo = 592;
    DOTA_UM_FoundNeutralItem = 593;
    DOTA_UM_OutpostCaptured = 594;
    DOTA_UM_OutpostGrantedXP = 595;
	DOTA_UM_MoveCameraToUnit = 596;
	DOTA_UM_PauseMinigameData = 597;
	DOTA_UM_VersusScene_PlayerBehavior = 598;
	DOTA_UM_QoP_ArcanaSummary = 600;
	DOTA_UM_HotPotato_Created = 601;
	DOTA_UM_HotPotato_Exploded = 602;
	DOTA_UM_WK_Arcana_Progress = 603;
	DOTA_UM_GuildChallenge_Progress = 604;
	DOTA_UM_WRArcanaProgress = 605;
	DOTA_UM_WRArcanaSummary = 606;
	DOTA_UM_EmptyItemSlotAlert = 607;
	DOTA_UM_AghsStatusAlert = 608;
	DOTA_UM_PingConfirmation = 609;
	DOTA_UM_MutedPlayers = 610;
	DOTA_UM_ContextualTip = 611;
	DOTA_UM_ChatMessage = 612;
}